<?php

/**
 * Implements hook_menu().
 */
function product_menu() {
  $items = array(
    'admin/ytu-settings/product' => array(
      'title' => 'Product Settings',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('product_admin_settings_form'),
      'access arguments' => array('access ytu settings'),
      'file' => 'product.admin.inc',
    ),
    'request/product/featured' => array(
      'title' => 'Featured Product',
      'page callback' => 'product_featured_product_cron_callback',
      'access arguments' => array('access content'),
      'file' => 'product.cron.inc',
    )
  );

  return $items;
}

/**
 * Implements hook_node_view().
 */
function product_node_view($node, $view_mode, $langcode) {
  if($node->type == 'product' || $node->type == 'playlist' || $node->type == 'gift_card'){
  	if($view_mode == 'full'){
  		$node->content['uc_product_image'][0]['#display_settings']['colorbox_node_style'] = 'uc_product';
  	}
    if($view_mode == 'full' || $view_mode == 'teaser'){
      if(isset($node->field_playlist[LANGUAGE_NONE][0]['target_id'])){
        $playlist_node = node_load($node->field_playlist[LANGUAGE_NONE][0]['target_id']);
        $playlist = node_view($playlist_node, $view_mode);
        $node->content['video_playlist']['#node'] = $playlist_node;
        $node->content['video_playlist']['sell_price'] = $playlist['sell_price'];
        $node->content['video_playlist']['add_to_cart'] = $playlist['add_to_cart'];
        drupal_add_js(drupal_get_path('module', 'product').'/product.js');

        $node->content['product_active']['#value'] = isset($_GET['type']) && $_GET['type'] == 'product';
        $node->content['video_active']['#value'] = !isset($_GET['type']) || $_GET['type'] == 'video';
      }

      if(product_is_on_backorder($node)){
        $node->content['body'][0]['#markup'] = _mm('product_on_backorder').$node->content['body'][0]['#markup'];
      }
    }
  	if($view_mode == 'teaser' || $view_mode == 'upsell'){
      if(!empty($node->content['uc_product_image'])){
    		foreach($node->content['uc_product_image']['#items'] as $delta => $item){
    			if($delta == 0){
    				continue;
    			}
    			unset($node->content['uc_product_image'][$delta]);
    		}
      }
  	}
    if($view_mode == 'upsell'){
      $node->content['add_to_cart']['#form']['qty']['#value'] = 1;
      $node->content['add_to_cart']['#form']['qty']['#title'] = '';
      $node->content['add_to_cart']['#form']['qty']['#required'] = false;
      $node->content['add_to_cart']['#form']['qty']['#attributes']['style'] = array('display:none;');

      //This class will prevent the add to cart button to be submitted via AJAX
      $node->content['add_to_cart']['#form']['actions']['submit']['#attributes']['class'][] = 'cart-page';
    }
  }
  if($node->type == 'renewal'){
    if($view_mode == 'full'){
      //Don't need a page for Teacher Renewal. Redirect to dashboard if someone tries to go to it.
      if(!account_is_admin() && $node->nid == variable_get('teacher_renewal_product_id','')){
        drupal_goto('user');
      }
    }

    if($view_mode == 'teaser'){
      $node->content['add_to_cart']['#form']['actions']['submit']['#attributes']['class'][] = 'blue-button';
      $node->content['add_to_cart']['#form']['actions']['submit']['#value'] = 'Renew YTU License';
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function product_form_playlist_node_form_alter(&$form, &$form_state) {
  $form['base']['default_qty']['#default_value'] = 0;
}

function product_is_on_backorder($product){
  $on_backorder = field_get_items('node', $product, 'field_backorder');
  return $on_backorder && $on_backorder[0]['value'];
}

function product_messages_info(){
  return array(
    'product_on_backorder'=>array(
      'title'=>"Product on Backorder Text",
      'description'=>"",
      'type'=>"richtext",
      'group'=>"product",
      'fieldset'=>'backorder',
      ),
  );
}

function product_change_featured_product(){
  if(variable_get('featured_product_page_nid','')){
    $product_landing = node_load(variable_get('featured_product_page_nid',''));
    if($product_landing){
      $used_products = db_select('featured_product', 'p')->fields('p', array('nid'))->execute()->fetchAllKeyed(0,0);
      $available_products = array();

      foreach($product_landing->field_products[LANGUAGE_NONE] as $product){
        if(!in_array($product['target_id'],$used_products)){
          $available_products[] = $product['target_id'];
        }
      }

      if(empty($available_products)){
        db_query('TRUNCATE featured_product');
        foreach($product_landing->field_products[LANGUAGE_NONE] as $product){
          $available_products[] = $product['target_id'];
        }
      }

      if($available_products){
        $featured_product = $available_products[array_rand($available_products)];
        db_insert('featured_product')
          ->fields(array(
            'nid' => $featured_product,
          ))->execute();

        variable_set('featured_product_nid', $featured_product);
      }
    }
  }
}

function product_get_featured_product(){
  if(variable_get('featured_product_nid', '')){
    return node_load(variable_get('featured_product_nid'));
  }

  return FALSE;
}