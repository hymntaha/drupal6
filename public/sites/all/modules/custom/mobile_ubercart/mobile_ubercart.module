<?php

/**
 * Implements hook_theme().
 */
function mobile_ubercart_theme($existing, $type, $theme, $path) {
  return array(
    'mobile_uc_cart_view_form'    => array(
      'render element' => 'form',
    ),
    'mobile_uc_cart_review'       => array(
      'variables' => array(
        'items'         => array(),
        'show_subtotal' => TRUE,
        'op'            => array()
      ),
    ),
    'custom_uc_cart_review_table' => array(
      'variables' => array('items' => array(), 'show_subtotal' => TRUE),
    ),
  );
}

/**
 * Implements hook_uc_cart_pane().
 */
function mobile_ubercart_uc_cart_pane($items) {
  $body = array();

  if (!is_null($items)) {
    $body = drupal_get_form('uc_cart_view_form', $items, 'mobile') + array(
        '#prefix' => '<div id="mobile-cart-form-pane">',
        '#suffix' => '</div>',
      );
  }

  $panes['mobile_cart_form'] = array(
    'title'   => t('Mobile cart form'),
    'enabled' => TRUE,
    'weight'  => -10,
    'body'    => $body,
  );

  return $panes;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function mobile_ubercart_form_uc_cart_view_form_alter(&$form, &$form_state, &$items = NULL) {

  if (@$form_state['build_info']['args'][1] == 'mobile') {
    $form['items']['#type'] = 'item';

    drupal_add_js(drupal_get_path('module', 'mobile_ubercart') . '/mobile_ubercart.js');

    $i = 0;

    $display_items = entity_view('uc_cart_item', $form_state['build_info']['args'][0], 'cart');
    foreach (element_children($display_items['uc_cart_item']) as $key) {
      $display_item = $display_items['uc_cart_item'][$key];
      if (count(element_children($display_item))) {

        $form['items'][$i]          = $display_item;
        $form['items'][$i]['image'] = uc_product_get_picture($display_item['nid']['#value'], 'uc_cart');

        //Add Backordered if item is backordered
        if (is_array($display_item) && isset($display_item['#entity']->type)) {
          if (isset($display_item['#entity']->data['backordered']) && $display_item['#entity']->data['backordered']) {
            $display_item['description']['#markup'] .= '<div class="backordered">Backordered</div>';
          }

          if(isset($display_item['#entity']->data['at_home_product_queue_info'])){
            $display_item['title']['#markup'] = $display_item['#entity']->title;
          }
        }

        $description = $display_item['title']['#markup'] . $display_item['description']['#markup'];

        //Remove Qty field on cart for At Home Programs, Renewals, Quickfix Videos and Playlists
        if (is_array($display_item) && isset($display_item['#entity']->type)) {
          if ($display_item['#entity']->type == 'renewal' ||
            $display_item['#entity']->type == 'uc_recurring_subscription' ||
            ($display_item['#entity']->type == 'product' && module_exists('testdotcom') && testdotcom_product_is_test($display_item['#entity'])) ||
            $display_item['#entity']->type == 'playlist' ||
            $display_item['#entity']->type == 'video_segment_product'
          ) {

            $form['items'][$i]['qty']['#type']  = 'hidden';
            $form['items'][$i]['qty']['#value'] = '1';
            $description = $display_item['#entity']->title;
            $form['items'][$i]['image']['#path']  = array();
          }
        }

        $form['items'][$i]['desc']['#markup'] = '<div class="description">' . $description . '</div>';

        if (isset($form['items'][$i]['remove'])) {
          // Backward compatibility with old checkbox method.
          if (isset($form['items'][$i]['remove']['#type']) && $form['items'][$i]['remove']['#type'] == 'checkbox') {
            $form['items'][$i]['remove'] = array('#type'  => 'submit',
                                                 '#value' => t('Remove')
            );
          }

          $form['items'][$i]['remove']['#value'] = 'x';
          $form['items'][$i]['remove']['#name']  = 'remove-' . $i;

          $form['items'][$i]['remove']['#prefix'] = '<div class="mobile-remove-container">' . l('X', '', array('attributes' => array('class' => array('mobile-cart-remove'))));
          $form['items'][$i]['remove']['#suffix'] = '</div>';
        }

        $form['items'][$i]['title']['#type']       = 'value';
        $form['items'][$i]['description']['#type'] = 'value';

        if (empty($display_item['qty'])) {
          $form['items'][$i]['qty'] = array(
            '#type'  => 'hidden',
            '#value' => 0,
          );
        }

        $form['items'][$i]['total'] = array(
          '#theme' => 'uc_price',
          '#price' => $display_item['#total'],
        );

        if (!empty($display_item['#suffixes'])) {
          $form['items'][$i]['total']['#suffixes'] = $display_item['#suffixes'];
        }

        $form['items'][$i]['image']['#weight'] = 0;
        $form['items'][$i]['desc']['#weight'] = 2;
        $form['items'][$i]['qty']['#weight'] = 3;
        $form['items'][$i]['remove']['#weight'] = 4;
        $form['items'][$i]['total']['#weight'] = 5;

        $form['items'][$i]['image']['#image_style'] = '';
        $form['items'][$i]['image']['#prefix'] = '<div class="row"><div class="col-xs-3">';
        $form['items'][$i]['image']['#suffix'] = '</div>';

        $form['items'][$i]['desc']['#prefix'] = '<div class="col-xs-9">';
        $form['items'][$i]['desc']['#suffix'] = '</div></div>';

        $form['items'][$i]['qty']['#prefix'] = '<div class="row"><div class="col-xs-offset-3 col-xs-3">';
        $form['items'][$i]['qty']['#suffix'] = '</div>';

        $prefix = isset($form['items'][$i]['remove']['#prefix']) ? $form['items'][$i]['remove']['#prefix'] : '';
        $suffix = isset($form['items'][$i]['remove']['#suffix']) ? $form['items'][$i]['remove']['#suffix'] : '';

        $form['items'][$i]['remove']['#prefix'] = '<div class="col-xs-3">'.$prefix;
        $form['items'][$i]['remove']['#suffix'] = $suffix.'</div>';

        $form['items'][$i]['total']['#prefix'] = '<div class="col-xs-3 text-right">';
        $form['items'][$i]['total']['#suffix'] = '</div></div>';

      }
      $i++;
    }

    while(isset($form['items'][$i])){
      if(isset($form['items'][$i]['total'])){
        $form['items'][$i]['total']['#prefix'] = '<div class="row"><div class="col-xs-12 text-right">'.$form['items'][$i]['total']['#prefix'];
        $form['items'][$i]['total']['#suffix'] = '</div>';
      }
      $i++;
    }

    $form['#theme'] = 'mobile_uc_cart_view_form';
  }
}


function theme_mobile_uc_cart_view_form($variables) {
  $form = &$variables['form'];

  $form['items']['#attributes'] = array('class' => array('row'));

  $output = '<div class="visible-xs">';

  $output .= drupal_render_children($form);
  $output .= '</div>';
  return $output;
}


/**
 * Implements hook_uc_checkout_pane().
 */

function mobile_ubercart_uc_checkout_pane() {
  $panes['mobile_cart'] = array(
    'callback'    => 'uc_checkout_pane_cart_mobile',
    'title'       => t('Cart Contents'),
    'desc'        => t("Display the contents of a customer's shopping cart."),
    'weight'      => 1,
    'process'     => FALSE,
    'collapsible' => FALSE,
  );
  return $panes;
}

function uc_checkout_pane_cart_mobile($op, $order, $form = NULL, &$form_state = NULL) {
  switch ($op) {
    case 'view':
      $contents['cart_review_table'] = array(
        '#theme'  => 'mobile_uc_cart_review',
        '#items'  => $order->products,
        '#weight' => variable_get('uc_pane_cart_field_cart_weight', 2),
      );
      return array('contents' => $contents, 'next-button' => FALSE);

    case 'review':
      $review[] = theme('mobile_uc_cart_review', array('items'         => $order->products,
                                                       'show_subtotal' => FALSE,
                                                       'op'            => $op
      ));
      return $review;
  }
}


function theme_mobile_uc_cart_review($variables) {
  $items         = $variables['items'];
  $show_subtotal = $variables['show_subtotal'];

  $subtotal = 0;

  $display_items = entity_view('uc_order_product', $items, 'full', NULL, NULL);

  $output = '<div class="visible-xs">';

  if (!empty($display_items['uc_order_product'])) {

    foreach (element_children($display_items['uc_order_product']) as $key) {

      $display_item = $display_items['uc_order_product'][$key];

      $subtotal += $display_item['total']['#price'];

      $display_item['qty']['#markup'] = '<div class="quantity">Qty ' . $display_item['qty']['#qty'] . '</div>';

      if (!isset($display_item['description'])) {
        $display_item['description']['#markup'] = '';
      }

      if(isset($display_item['#entity']->data['at_home_product_queue_info'])){
        $display_item['product']['#markup'] = $display_item['#entity']->title.'<br />';
      }

      //Add Backordered if item is backordered
      if (isset($display_item['#entity']->data['backordered']) && $display_item['#entity']->data['backordered']) {
        $display_item['description']['#markup'] .= '<div class="backordered">Backordered</div>';
      }

      $output .= $display_item['product']['#markup'] . $display_item['description']['#markup'];
      $output .= uc_currency_format($display_item['price']['#price']);
      $output .= $display_item['qty']['#markup'];

    }
  }

  //$output .= '<div class="subtotal"><label>Subtotal:</label> ' . uc_currency_format($subtotal) . '</div>';

  $output .= '</div>';
  return $output;
}

/**
 * Alters checkout pane definitions.
 *
 * @param $panes
 *   Array with the panes information as defined in hook_uc_checkout_pane(),
 *   passed by reference.
 */
function mobile_ubercart_uc_checkout_pane_alter(&$panes) {
  $panes['cart']['callback'] = 'mobile_uc_checkout_pane_cart';

}

function mobile_uc_checkout_pane_cart($op, $order, $form = NULL, &$form_state = NULL) {
  switch ($op) {
    case 'view':
      $contents['cart_review_table'] = array(
        '#theme'  => 'uc_cart_review_table',
        '#items'  => $order->products,
        '#weight' => variable_get('uc_pane_cart_field_cart_weight', 2),
      );
      return array('contents' => $contents, 'next-button' => FALSE);

    case 'review':
      $review[] = theme('custom_uc_cart_review_table', array('items'         => $order->products,
                                                             'show_subtotal' => FALSE
      ));
      return $review;
  }
}


/**
 * Formats the cart contents table on the checkout page.
 *
 * @param $variables
 *   An associative array containing:
 *   - show_subtotal: TRUE or FALSE indicating if you want a subtotal row
 *     displayed in the table.
 *   - items: An associative array of cart item information containing:
 *     - qty: Quantity in cart.
 *     - title: Item title.
 *     - price: Item price.
 *     - desc: Item description.
 *
 * @return
 *   The HTML output for the cart review table.
 *
 * @ingroup themeable
 */
function theme_custom_uc_cart_review_table($variables) {
  $items         = $variables['items'];
  $show_subtotal = $variables['show_subtotal'];

  $subtotal = 0;

  // Set up table header.
  $header = array(
    array('data' => t('Products'), 'class' => array('products')),
    array('data' => t('Unit Price'), 'class' => array('unit-price')),
    array('data' => theme('uc_qty_label'), 'class' => array('qty')),
    array('data' => t('Price'), 'class' => array('price')),
  );

  // Set up table rows.
  $display_items = entity_view('uc_order_product', $items, 'full', NULL, NULL);
  if (!empty($display_items['uc_order_product'])) {
    foreach (element_children($display_items['uc_order_product']) as $key) {
      $display_item = $display_items['uc_order_product'][$key];

      if(isset($display_item['#entity']->data['at_home_product_queue_info'])){
        $display_item['product']['#markup'] = $display_item['#entity']->title;
      }

      $price_modify = array();

      if (!empty($display_item['#entity']->data['uc_coupon'])) {
        $price_modify = reset($display_item['#entity']->data['uc_coupon']);
        $code         = key($display_item['#entity']->data['uc_coupon']);
        $display_item['product']['#markup'] .= ' <span class="small">' . uc_coupon_get_product_description_for_code($code) . '</span>';
      }

      if (!empty($display_item['#entity']->data['video_discount'])) {
        $price_modify = reset($display_item['#entity']->data['video_discount']);
      }

      if (upsell_cart_item_is_upsell($display_item['#entity'])) {
        $price_modify = upsell_get_price_modify($display_item['#entity']);
        $display_item['product']['#markup'] .= ' <span class="small">' . (UPSELL_DISCOUNT * 100) . '% Off</span>';
      }

      //Add Backordered if item is backordered
      if (isset($display_item['#entity']->data['backordered']) && $display_item['#entity']->data['backordered']) {
        $display_item['product']['#markup'] .= '<div class="backordered">Backordered</div>';
      }

      if (!empty($price_modify)) {
        $display_item['price'] = array('#markup' => '<span class="strikethrough">' . theme('uc_price', array('price' => $price_modify['original_price'])) . '</span><br />' . theme('uc_price', array('price' => $price_modify['price'])));
        if(isset($price_modify['max_discount_quantity'])){
          $prices = array();
          foreach($price_modify['max_discount_quantity'] as $max_discount_qty){
            $prices[] = theme('uc_price',array('price' => $max_discount_qty['unit_price'])).'&nbsp;x'.$max_discount_qty['qty'];
          }
          $display_item['price'] = implode('<br />', $prices);
        }}


      $subtotal += $display_item['total']['#price'];
      $rows[] = array(
        array('data' => $display_item['product'], 'class' => array('products')),
        array('data' => $display_item['price'], 'class' => array('unit-price')),
        array('data' => $display_item['qty'], 'class' => array('qty')),
        array('data' => $display_item['total'], 'class' => array('price')),
      );
    }
  }

  // Add the subtotal as the final row.
  if ($show_subtotal) {
    $rows[] = array(
      'data'  => array(
        // One cell
        array(
          'data'    => array(
            '#theme'  => 'uc_price',
            '#prefix' => '<span id="subtotal-title">' . t('Subtotal:') . '</span> ',
            '#price'  => $subtotal,
          ),
          // Cell attributes
          'colspan' => 4,
          'class'   => array('subtotal'),
        ),
      ),
      // Row attributes
      'class' => array('subtotal'),
    );
  }

  return theme('table', array('header'     => $header,
                              'rows'       => $rows,
                              'attributes' => array('class' => array('cart-review'))
  ));
}



